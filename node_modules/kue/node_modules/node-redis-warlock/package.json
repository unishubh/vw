{
  "name": "node-redis-warlock",
  "version": "0.2.0",
  "description": "Battle-hardened distributed locking using redis",
  "main": "lib/warlock.js",
  "scripts": {
    "test": "mocha -R list ./test/warlock",
    "bench": "mocha -R list ./test/bench"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/thedeveloper/warlock"
  },
  "keywords": [
    "node.js",
    "redis",
    "lock"
  ],
  "author": {
    "name": "Geoff Wagstaff"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/thedeveloper/warlock/issues"
  },
  "homepage": "https://github.com/thedeveloper/warlock",
  "dependencies": {
    "node-redis-scripty": "0.0.5",
    "uuid": "^2.0.1"
  },
  "devDependencies": {
    "async": "^1.5.1",
    "mocha": "^2.3.4",
    "redis": "^2.4.2",
    "should": "^8.0.2"
  },
  "readme": "warlock\n=======\n\n[![Travis](https://travis-ci.org/TheDeveloper/warlock.svg?branch=master)](https://travis-ci.org/TheDeveloper/warlock)\n[![Dependency Status](https://david-dm.org/thedeveloper/warlock.svg)](https://david-dm.org/thedeveloper/warlock)\n[![Join the chat at https://gitter.im/TheDeveloper/warlock](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/TheDeveloper/warlock?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nBattle-hardened distributed locking using redis.\n\n## Requirements\n\n* [node-redis](https://github.com/mranney/node_redis) compatible with `v0.10`\n* Redis `v2.6.12` or above. If you're running a Redis version from `v2.6.0` to `v2.6.11` inclusive use `v0.0.7` of this module.\n\n## Install\n\n    npm install node-redis-warlock\n\n## Usage\n\n```javascript\n\nvar Warlock = require('node-redis-warlock');\nvar redis = require('redis');\n\n// Establish a redis client and pass it to warlock\nvar redis = redis.createClient();\nvar warlock = Warlock(redis);\n\n// Set a lock\nvar key = 'test-lock';\nvar ttl = 10000; // Lifetime of the lock\n\nwarlock.lock(key, ttl, function(err, unlock){\n  if (err) {\n    // Something went wrong and we weren't able to set a lock\n    return;\n  }\n\n  if (typeof unlock === 'function') {\n    // If the lock is set successfully by this process, an unlock function is passed to our callback.\n    // Do the work that required lock protection, and then unlock() when finished...\n    //\n    // do stuff...\n    //\n    unlock();\n  } else {\n    // Otherwise, the lock was not established by us so we must decide what to do\n    // Perhaps wait a bit & retry...\n  }\n});\n\n// set a lock optimistically\nvar key = 'opt-lock';\nvar ttl = 10000;\nvar maxAttempts = 4; // Max number of times to try setting the lock before erroring\nvar wait = 1000; // Time to wait before another attempt if lock already in place\nwarlock.optimistic(key, ttl, maxAttempts, wait, function(err, unlock) {});\n\n// unlock using the lock id\nvar key = 'test-lock-2';\nvar ttl = 10000;\nvar lockId;\n\nwarlock.lock(key, ttl, function(err, _, id) {\n  lockId = id;\n});\n\n// each client who knows the lockId can release the lock\nwarlock.unlock(key, lockId, function(err, result) {\n  if(result == 1) {\n    // unlocked successfully\n  }\n});\n\n```\n\n## ProTips\n\n* Read my [Distributed locks using Redis](https://engineering.gosquared.com/distributed-locks-using-redis) article and Redis' author's [A proposal for more reliable locks using Redis](http://antirez.com/news/77) to learn more about the theory of distributed locks using Redis.\n",
  "readmeFilename": "README.md",
  "_id": "node-redis-warlock@0.2.0",
  "dist": {
    "shasum": "8258444b85a3ea0fd9029c7ac721d338e7e603be"
  },
  "_from": "node-redis-warlock@~0.2.0",
  "_resolved": "https://registry.npmjs.org/node-redis-warlock/-/node-redis-warlock-0.2.0.tgz"
}
